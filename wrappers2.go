/*
This file produces type-specific wrappers for the twiddle algorithm.
Code generated by gen-choose.go.  DO NOT EDIT.
*/

package choose

// Strings returns all length-M combinations of a slice of strings one at a
// time on a channel.
func Strings(a []string, m int) <-chan []string {
	// Initialize our state.
	ch := make(chan []string, 100)
	n := len(a)
	st := newState(n, m)
	c := make([]string, m)
	for i := range c {
		c[i] = a[n-m+i]
	}

	// Spawn a goroutine to write all combinations into the channel.  We
	// always return a copy of the combination rather than the original
	// because the combination itself is modified in place.
	go func() {
		cCopy := make([]string, m)
		copy(cCopy, c)
		ch <- cCopy
		for st.nextCombination() {
			c[st.Z] = a[st.X]
			cCopy := make([]string, m)
			copy(cCopy, c)
			ch <- cCopy
		}
		close(ch)
	}()
	return ch
}

// Ints returns all length-M combinations of a slice of ints one at a
// time on a channel.
func Ints(a []int, m int) <-chan []int {
	// Initialize our state.
	ch := make(chan []int, 100)
	n := len(a)
	st := newState(n, m)
	c := make([]int, m)
	for i := range c {
		c[i] = a[n-m+i]
	}

	// Spawn a goroutine to write all combinations into the channel.  We
	// always return a copy of the combination rather than the original
	// because the combination itself is modified in place.
	go func() {
		cCopy := make([]int, m)
		copy(cCopy, c)
		ch <- cCopy
		for st.nextCombination() {
			c[st.Z] = a[st.X]
			cCopy := make([]int, m)
			copy(cCopy, c)
			ch <- cCopy
		}
		close(ch)
	}()
	return ch
}

// Float64s returns all length-M combinations of a slice of float64s one at a
// time on a channel.
func Float64s(a []float64, m int) <-chan []float64 {
	// Initialize our state.
	ch := make(chan []float64, 100)
	n := len(a)
	st := newState(n, m)
	c := make([]float64, m)
	for i := range c {
		c[i] = a[n-m+i]
	}

	// Spawn a goroutine to write all combinations into the channel.  We
	// always return a copy of the combination rather than the original
	// because the combination itself is modified in place.
	go func() {
		cCopy := make([]float64, m)
		copy(cCopy, c)
		ch <- cCopy
		for st.nextCombination() {
			c[st.Z] = a[st.X]
			cCopy := make([]float64, m)
			copy(cCopy, c)
			ch <- cCopy
		}
		close(ch)
	}()
	return ch
}
